{
  "name": "haskutil",
  "displayName": "Haskutil",
  "description": "'QuickFix' actions for Haskell editor",
  "version": "0.13.1",
  "publisher": "Edka",
  "icon": "images/Haskutil-logo.png",
  "repository": {
    "url": "https://github.com/EduardSergeev/vscode-haskutil"
  },
  "engines": {
    "vscode": "^1.48.0"
  },
  "categories": [
    "Other"
  ],
  "license": "MIT",
  "galleryBanner": {
    "theme": "dark",
    "color": "#444"
  },
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "haskell",
        "aliases": [
          "Haskell",
          "haskell"
        ],
        "extensions": [
          ".hs",
          ".lhs"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Haskutil configuration settings",
      "properties": {
        "haskutil.feature.addImport": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Add import` feature"
        },
        "haskutil.feature.addQualifiedImport": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Add qualified import` feature"
        },
        "haskutil.feature.organizeImports": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Organize import` feature"
        },
        "haskutil.feature.addExtension": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Add extension` feature"
        },
        "haskutil.feature.organizeExtensions": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Organize extensions` feature"
        },
        "haskutil.feature.addSignature": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Add top-level signature` feature"
        },
        "haskutil.feature.fillTypeHole": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Fill type hole` feature"
        },
        "haskutil.feature.fillTypeWildcard": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Fill type wildcard` feature"
        },
        "haskutil.alignImports": {
          "type": "boolean",
          "description": "Align imports when organizing imports",
          "default": true
        },
        "haskutil.alwaysPadImports": {
          "type": "boolean",
          "description": "Always pad after `import` regardless if there is `qualified` import or not",
          "default": false
        },
        "haskutil.sortImports": {
          "type": "boolean",
          "description": "Sort imports when organizing imports",
          "default": true
        },
        "haskutil.organiseImportsOnSave": {
          "type": "boolean",
          "description": "Organize imports on save",
          "default": false
        },
        "haskutil.organiseImportsOnInsert": {
          "type": "boolean",
          "description": "Organize imports when adding new import",
          "default": true
        },
        "haskutil.feature.removeUnusedImport": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Enable `Remove unused imports` feature"
        },
        "haskutil.splitExtensions": {
          "type": "boolean",
          "description": "Make sure there is one extension per LANGUAGE pragma when organizing extensions",
          "default": true
        },
        "haskutil.alignExtensions": {
          "type": "boolean",
          "description": "Make sure of LANGUAGE extension pragma are of the same length when organizing extensions",
          "default": true
        },
        "haskutil.sortExtensions": {
          "type": "boolean",
          "description": "Make sure LANGUAGE extension pragmas are sorted when organizing imports",
          "default": true
        },
        "haskutil.organiseExtensionOnSave": {
          "type": "boolean",
          "description": "Organize extensions on save",
          "default": false
        },
        "haskutil.organiseExtensionOnInsert": {
          "type": "boolean",
          "description": "Organize extensions when adding new extensions",
          "default": true
        },
        "haskutil.supportedExtensions": {
          "type": "array",
          "description": "Haskell LANGUAGE extensions specified in GHC's error messages",
          "default": [
            "BangPatterns",
            "DataKinds",
            "DefaultSignatures",
            "DeriveFunctor",
            "DeriveGeneric",
            "FlexibleContexts",
            "FlexibleInstances",
            "FunctionalDependencies",
            "GADTs",
            "GeneralizedNewtypeDeriving",
            "KindSignatures",
            "MultiParamTypeClasses",
            "NamedFieldPuns",
            "RankNTypes",
            "RecordWildCards",
            "StandaloneDeriving",
            "TemplateHaskell",
            "TupleSections",
            "TypeFamilies",
            "TypeSynonymInstances",
            "UndecidableInstances",
            "TypeApplications",
            "ViewPatterns"
          ]
        },
        "haskutil.checkDiagnosticsExtension": {
          "type": "boolean",
          "description": "Check if any of recommended VSCode extensions which generate Haskell diagnostics is installed",
          "default": true
        },
        "haskutil.supportedDependencies": {
          "type": "array",
          "description": "Supported Haskell diagnostic generating extensions",
          "items": {
            "type":"object",
            "properties": {
              "id": {
                "title": "Extension id",
                "type":"string"
              },
              "name": {
                "title": "Extension name",
                "type":"string"
              }
            }
          },
          "default": [
            {
              "id": "dramforever.vscode-ghc-simple",
              "name": "GHC"
            },{
              "id": "Vans.haskero",
              "name": "Haskero"
            },{
              "id": "ndmitchell.haskell-ghcid",
              "name": "ghcid"
            },{
              "id": "digitalassetholdingsllc.ghcide",
              "name": "ghcid"
            },{
              "id": "taylorfausak.purple-yolk",
              "name": "Purple Yolk"
          }]
        }
      }
    }
  },
  "activationEvents": [
    "onLanguage:haskell"
  ],
  "extensionDependencies": [
    "jcanero.hoogle-vscode"
  ],
  "scripts": {
    "precompile": "rm -rf ./out",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "mocha ./out/test/runTest.js",
    "coverage": "nyc npm test",
    "prepackage": "npm run compile",
    "package": "vsce package",
    "preupload": "npm run package",
    "upload": "vsce publish"
  },
  "nyc": {
    "extends": "@istanbuljs/nyc-config-typescript",
    "require": [
      "ts-node/register",
      "source-map-support/register"
    ],
    "include": [
      "src/**/*.ts",
      "out/**/*.js"
    ],
    "exclude": [
      "src/test/*"
    ],
    "reporter": [
      "text-summary",
      "html",
      "lcov"
    ],
    "check-coverage": false,
    "report-dir": ".coverage"
  },
  "devDependencies": {
    "@istanbuljs/nyc-config-typescript": "1.0.2",
    "@types/chai": "4.3.16",
    "@types/mocha": "10.0.6",
    "@types/node": "20.12.11",
    "@types/vscode": "1.48.0",
    "@vscode/vsce": "2.26.1",
    "@vscode/test-electron": "2.3.9",
    "chai": "4.4.1",
    "mocha": "10.4.0",
    "nyc": "15.1.0",
    "source-map-support": "0.5.21",
    "ts-node": "10.9.2",
    "tslint": "6.1.3",
    "typescript": "4.9.5"
  }
}
